name: Deployment CI&CD

on:
  push:
    branches: [ "master" ]

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    steps:
      - name: Setup (Checkout)
        uses: actions/checkout@v3

      - name: Setup (Env)
        run: |
          touch .env
          echo "${{ secrets.SERVER_ENV }}" > .env
          cat .env 

      - name: Build (Docker Images)
        run: |
          docker compose pull
          docker compose build 
      
      - name: Prepare (Saving Images to Transfer)
        run: |
          mkdir repository
          docker images
          docker save frontend | gzip > ./repository/frontend.tar.gz
          docker save backend | gzip > ./repository/backend.tar.gz
          docker save postgres | gzip > ./repository/postgres.tar.gz
          cd repository && ls -la && cd ..


      - name: Transfer (Transfer Images to Server)
        uses: burnett01/rsync-deployments@5.2
        with: 
          switches: -rv
          path: ./repository
          remote_path: ~/vps
          remote_host: ${{ secrets.SSH_HOST }} 
          remote_port: ${{ secrets.SSH_PORT }} 
          remote_user: ${{ secrets.SSH_USERNAME }}
          remote_key: ${{ secrets.SSH_KEY }} 
          

      - name: SSH Deployment (Transfer Images)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Setup (workdir)
            cd ~/vps
            git pull

            # Setup (load transfered images)
            cd ./repository
            gunzip frontend.tar.gz | pv && docker load -i frontend.tar | pv
            gunzip backend.tar.gz | pv && docker load -i backend.tar | pv
            gunzip postgres.tar.gz | pv && docker load -i postgres.tar | pv
            cd .. 

            # Deploy (Restart with loaded images)
            docker compose restart && yarn on:started-prod